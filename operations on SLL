#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* next;
}*newnode,*temp;
struct node* head=NULL;
struct node* tail=NULL;

// creation of a single linked list
void create ()
{
    char ch;
    int value;
    do
    {
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter the value");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=NULL;
    if(head==NULL)
    {
        head=newnode;
        tail=newnode;
    }
    else
    {
        tail->next=newnode;
        tail=newnode;
    }
    printf("enter e to exit and c to continue");
    scanf(" %c",&ch);
    }
    while(ch == 'c');
}

// display of a single linked list
void display()
{
    temp=head;
    while(temp!=NULL)
    {
    printf("%d\n",temp->data);
    temp=temp->next;
    }
}

// insertion at the beginning
void insert_beg ()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter the value");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=head;
    head=newnode;
}

// insertion at the specified position
void insert_pos ()
{
    int pos,value,i=0;
    printf("enter the position");
    scanf("%d",&pos);
    temp=head;
    while(i<pos-1)
    {
        temp=temp->next;
        i=i+1;
    }
    printf("enter the value");
    scanf("%d",&value);
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=value;
    newnode->next=temp->next;
    temp->next=newnode;
}

// insertion at the end
void insert_end ()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter the value");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=NULL;
    tail->next=newnode;
    tail=newnode;
}

// deletion at the beginning
void delete_beg ()
{
    temp=head;
    head=head->next;
    temp->next=NULL;
}

// deletion at the end
void delete_end ()
{
    temp=head;
    while(temp->next!=tail)
    {
        temp=temp->next;
    }
    temp->next=NULL;
    tail=temp;
}

// deletion at the specified position
void delete_pos ()
{
    int pos,i=0;
    printf("enter the position");
    scanf("%d",&pos);
    temp=head;
    while(i<pos-1)
    {
        temp=temp->next;
        i=i+1;
    }
    temp->next=temp->next->next;
}

// reverse of a list
void reverse ()
{
    struct node* prevnode=NULL;
    struct node* currentnode=head;
    struct node* nextnode=head;
    while(nextnode!=NULL)
    {
        nextnode=nextnode->next;
        currentnode->next=prevnode;
        prevnode=currentnode;
        currentnode=nextnode;
    }
    head=prevnode;
}

// to count the elements in a list
void count ()
{
    int c=0;
    temp=head;
    while(temp!=NULL)
    {
    printf("%d\n",temp->data);
    temp=temp->next;
    c++;
    }
    printf("Number of elements is %d",c);
}

void sort()
{
    int var;
    struct node* i,*j;
    temp=head;
    for(i=temp;i->next!=NULL;i=i->next)
    {
        for(j=i->next;j!=NULL;j=j->next)
        {
            if(i->data > j->data)
            {
                var=i->data;
                i->data=j->data;
                j->data=var;
            }
        }
    }
}

void main ()
{
    int choice=0;
    printf("1-creation\n2display\n3-insert beg\n4-insert end\n5-insert pos\n6-delete beg\n7-delete end\n8-delete pos\n9-reverse\n10-count\nothers-exit\n");
    while(choice<12)
    {
        printf("enter the choice");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: create();
                   break;
            case 2: display();
                   break;
            case 3: insert_beg();
                   break;
            case 4: insert_end();
                   break;
            case 5: insert_pos();
                   break;
            case 6: delete_beg();
                   break;
            case 7: delete_end();
                   break;
            case 8: delete_pos();
                   break;
            case 9: reverse();
                    break;
            case 10: count();
                   break;
            case 11:sort();
                    break;
            default : printf("Enter the valid number");
        }
    }
}

output:
1-creation
2display
3-insert beg
4-insert end
5-insert pos
6-delete beg
7-delete end
8-delete pos
9-reverse
10-count
others-exit

enter the choice1
enter the value12
enter e to exit and c to continuec
enter the value22
enter e to exit and c to continuec
enter the value32
enter e to exit and c to continuec
enter the value42
enter e to exit and c to continuec
enter the value52
enter e to exit and c to continuee

enter the choice6

enter the choice7

enter the choice2
22
32
42

enter the choice12
Enter the valid number
